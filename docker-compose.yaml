version: '2'
services:

  plateforme:
    build: 
      context: .
      dockerfile: Dockerfile.nginx
    ports: 
      - "80:80"
      - "443:443"
    container_name: plateforme
    # container_name: nginx.plateforme.Dockerfile
    depends_on:
    - api-cegid
    - api-plateforme
    - postgres
    volumes:
      - react-plateforme:/plateforme


  api-plateforme:
    build: 
      context: ./api-plateforme
      dockerfile: api.plateforme.Dockerfile
    command: npm run docker
    ports: 
      - "4001:4001"
    container_name: api-plateforme
    depends_on:
    - postgres
    - api-cegid
    volumes:
      - api-plateforme:/api-plateforme

  api-cegid: 
    build: 
      context : ./api-cegid
      dockerfile: api.cegid.Dockerfile
    command: npm run prod
    ports: 
      - "5000:5000"
    container_name: api-cegid

  postgres: 
    image: postgres:14
    restart: always
    ports: 
    ## On le run au port 5433 pour éviter des problèmes si il y a deux bases de données. Surtout dans l'environnement de dev
      - "5433:5432"
    volumes: 
      - postgres-plateforme:/var/lib/postgresql/data
      # Cette ligne remplace le script d'initalization de postgres par notre script d'initalisation pour la base de donnée
      - ./SQL/Plateforme/init.sql:/docker-entrypoint-initdb.d/init.sql

    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=wYH582It2xA
      - POSTGRES_USER=apiplateforme
      - POSTGRES_DB=ecommerce

volumes:
  postgres-plateforme:
    driver: local
  react-plateforme:
    driver: local
  api-plateforme:
    driver: local
  